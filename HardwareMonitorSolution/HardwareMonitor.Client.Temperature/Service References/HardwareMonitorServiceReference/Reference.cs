//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HardwareManager.Temperature.WinTrayUI.HardwareMonitorServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HardwareMonitorServiceReference.IHardwareMonitorWCFContract")]
    public interface IHardwareMonitorWCFContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUsCount", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUsCountResponse")]
        int GetCPUsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUsCount", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUsCountResponse")]
        System.Threading.Tasks.Task<int> GetCPUsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetAvgCPUsTemperature", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetAvgCPUsTemperatureResponse")]
        System.Nullable<float> GetAvgCPUsTemperature();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetAvgCPUsTemperature", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetAvgCPUsTemperatureResponse")]
        System.Threading.Tasks.Task<System.Nullable<float>> GetAvgCPUsTemperatureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUTemperature", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUTemperatureResponse")]
        System.Nullable<float> GetCPUTemperature(int cpuIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUTemperature", ReplyAction="http://tempuri.org/IHardwareMonitorWCFContract/GetCPUTemperatureResponse")]
        System.Threading.Tasks.Task<System.Nullable<float>> GetCPUTemperatureAsync(int cpuIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHardwareMonitorWCFContractChannel : HardwareManager.Temperature.WinTrayUI.HardwareMonitorServiceReference.IHardwareMonitorWCFContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HardwareMonitorWCFContractClient : System.ServiceModel.ClientBase<HardwareManager.Temperature.WinTrayUI.HardwareMonitorServiceReference.IHardwareMonitorWCFContract>, HardwareManager.Temperature.WinTrayUI.HardwareMonitorServiceReference.IHardwareMonitorWCFContract {
        
        public HardwareMonitorWCFContractClient() {
        }
        
        public HardwareMonitorWCFContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HardwareMonitorWCFContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HardwareMonitorWCFContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HardwareMonitorWCFContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetCPUsCount() {
            return base.Channel.GetCPUsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetCPUsCountAsync() {
            return base.Channel.GetCPUsCountAsync();
        }
        
        public System.Nullable<float> GetAvgCPUsTemperature() {
            return base.Channel.GetAvgCPUsTemperature();
        }
        
        public System.Threading.Tasks.Task<System.Nullable<float>> GetAvgCPUsTemperatureAsync() {
            return base.Channel.GetAvgCPUsTemperatureAsync();
        }
        
        public System.Nullable<float> GetCPUTemperature(int cpuIndex) {
            return base.Channel.GetCPUTemperature(cpuIndex);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<float>> GetCPUTemperatureAsync(int cpuIndex) {
            return base.Channel.GetCPUTemperatureAsync(cpuIndex);
        }
    }
}
