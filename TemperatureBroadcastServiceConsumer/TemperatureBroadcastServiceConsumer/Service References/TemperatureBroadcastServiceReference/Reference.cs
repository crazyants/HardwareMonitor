//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemperatureBroadcastServiceConsumer.TemperatureBroadcastServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TemperatureBroadcastServiceReference.ITemperatureWCFClientBroadcast", CallbackContract=typeof(TemperatureBroadcastServiceConsumer.TemperatureBroadcastServiceReference.ITemperatureWCFClientBroadcastCallback))]
    public interface ITemperatureWCFClientBroadcast {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITemperatureWCFClientBroadcast/SubscribeClient")]
        void SubscribeClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITemperatureWCFClientBroadcast/SubscribeClient")]
        System.Threading.Tasks.Task SubscribeClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITemperatureWCFClientBroadcast/UnsubscribeClient")]
        void UnsubscribeClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITemperatureWCFClientBroadcast/UnsubscribeClient")]
        System.Threading.Tasks.Task UnsubscribeClientAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITemperatureWCFClientBroadcastCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITemperatureWCFClientBroadcast/AvgCPUsTemperatureChanged")]
        void AvgCPUsTemperatureChanged(float temperature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITemperatureWCFClientBroadcastChannel : TemperatureBroadcastServiceConsumer.TemperatureBroadcastServiceReference.ITemperatureWCFClientBroadcast, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemperatureWCFClientBroadcastClient : System.ServiceModel.DuplexClientBase<TemperatureBroadcastServiceConsumer.TemperatureBroadcastServiceReference.ITemperatureWCFClientBroadcast>, TemperatureBroadcastServiceConsumer.TemperatureBroadcastServiceReference.ITemperatureWCFClientBroadcast {
        
        public TemperatureWCFClientBroadcastClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TemperatureWCFClientBroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TemperatureWCFClientBroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureWCFClientBroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureWCFClientBroadcastClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeClient() {
            base.Channel.SubscribeClient();
        }
        
        public System.Threading.Tasks.Task SubscribeClientAsync() {
            return base.Channel.SubscribeClientAsync();
        }
        
        public void UnsubscribeClient() {
            base.Channel.UnsubscribeClient();
        }
        
        public System.Threading.Tasks.Task UnsubscribeClientAsync() {
            return base.Channel.UnsubscribeClientAsync();
        }
    }
}
